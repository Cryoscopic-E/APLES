import copy
import datetime
import random
import string
from openpyxl import load_workbook
import pandas as pd
from openpyxl.styles import numbers, Alignment

exported = './data/exported1.xlsx'
excel_data_path = './data/example.csv'

sheet_data_path = './data/sheet1.csv' 
sheet2_data_path = './data/sheet2.csv' 
current_level_ = 0

def export_to_excel():
    df = pd.read_csv(sheet_data_path)
    writer = pd.ExcelWriter(exported, engine='openpyxl', mode='a', if_sheet_exists='replace')
    df.to_excel(writer, sheet_name='tasks', index=None)
    writer.close()
    
    df = pd.read_csv(sheet2_data_path)

    with pd.ExcelWriter(exported, engine='openpyxl', mode='a', if_sheet_exists='replace') as writer:
        df.to_excel(writer, sheet_name='challenges', index=False)
        workbook = writer.book
        s = workbook['tasks']
        
        for cell in s[1]:
            cell.style = 'Normal'

    with pd.ExcelWriter(exported, engine='openpyxl', mode='a', if_sheet_exists='replace') as writer:
        df.to_excel(writer, sheet_name='challenges', index=False)

        workbook = writer.book
        s = workbook['challenges']
        
        for cell in s[1]:
            cell.style = 'Normal'

        first_h = True
        for cell in s["H"]:
            if first_h == False:
                cell.value = datetime.datetime.strptime('2024-07-01 6:00', '%Y-%m-%d %H:%M')
                cell.number_format = 'yyyy-mm-dd hh:mm'
            first_h = False
        
        first_g = True
        for cell in s["G"]:
            if first_g == False:
                cell.value = '122'
                cell.number_format = numbers.FORMAT_TEXT
            first_g = False   

        first_s = True
        for cell in s["I"]:
            if first_s == False:
                cell.value = datetime.datetime.strptime('2024-10-01 6:00', '%Y-%m-%d %H:%M')
                cell.number_format = 'yyyy-mm-dd hh:mm'
            first_s = False

        
def empty_sheets():
    df = pd.read_csv(sheet_data_path)
    df = pd.DataFrame(df.head(0))
    df = df.applymap(lambda x: x.strip() if isinstance(x, str) else x)
    df.to_csv(sheet_data_path, index=False)
    df = pd.read_csv(sheet2_data_path)
    df = pd.DataFrame(df.head(0))
    df = df.applymap(lambda x: x.strip() if isinstance(x, str) else x)
    df.to_csv(sheet2_data_path, index=False)


def append_row_to_sheet(name, frequency):
    global current_level_

    df = pd.read_csv(sheet_data_path)
    rand_secret = ''.join(random.choices(string.ascii_lowercase +
                                string.digits, k=random.randint(10,50)))
    new_row = {
        'challenge': current_level_,
        'name': '{}'.format(name),
        'description': '',
        'image': 'https://campaigns.healthyw8.gamebus.eu/api/media/HW8-immutable/5ff935d3-d0ae-4dce-bfcd-d2f71bf2ca63.jpeg',
        'video': '',
        'h5p_slug': '',
        'max_times_fired': frequency,
        'min_days_between_fire': '7',
        'activityscheme_default': 'GENERAL_ACTIVITY',
        'activityschemes_allowed': 'GENERAL_ACTIVITY',
        'image_required': '1',
        'conditions': '[SECRET, EQUAL, {}]'.format(rand_secret),
        'points': '1',
        'dataproviders': 'GameBus Studio'
    }
    # df = pd.DataFrame([new_row])
    df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
    df.to_csv(sheet_data_path, index=False)

def append_level_to_sheet():
    global current_level_
    df = pd.read_csv(sheet2_data_path)
    if current_level_ == 1:
        is_initial_level = 1
    else:
        is_initial_level = 0
    new_row = {
        'campaign': 17,
        'id': current_level_,
        'type': 'TASKS_COLLECTION',
        'name': 'G{}'.format(current_level_),
        'image': 'https://campaigns.healthyw8.gamebus.eu/api/media/HW8-immutable/3ad4d1db-b854-45cb-bcef-59dbaee47f6e.jpeg',
        'description': 'Generated by AI',
        'visualizations': '122',
        'start': datetime.datetime.strptime('2024-07-01 6:00', '%Y-%m-%d %H:%M'),
        'end': datetime.datetime.strptime('2024-10-01 6:00', '%Y-%m-%d %H:%M'),
        'contender': '',
        'is_initial_level': is_initial_level,
        'target': '10',
        'success_next': '',
        'evaluate_fail_every_x_minutes': '10080',
        'failure_next': ''
    }
    # df = pd.DataFrame([new_row])
    df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
    df.to_csv(sheet2_data_path, index=False)

def get_executed_actions(plan):
    executed_actions = []
    lines = str(plan).splitlines()
    for line in lines:
        line = line.strip()
        if line and not line.endswith(':'):
            action_name = line
            if "tutorial" not in action_name:
                action_name = action_name.split('(')[0] 
            executed_actions.append(action_name)
    return executed_actions

def export_plan_to_sheet(p):
    global current_level_
    actions = get_executed_actions(p)
    df_actions = pd.read_csv(excel_data_path)
    add_new_level()
    for a in actions:
        match = df_actions[df_actions['Activities'] == a]

        if "tutorial" in a:
            append_row_to_sheet(a, 1)
            add_new_level()
            # current_level_ = current_level_ + 1

        elif not match.empty:
            activityname = match['Activities'].values[0]
            frequency = match['Frequency'].values[0]
            append_row_to_sheet(activityname, frequency)
    # current_level_ = current_level_ + 1
    append_level_to_sheet()

def add_new_level():
    global current_level_
    current_level_ = current_level_ + 1
    append_level_to_sheet()